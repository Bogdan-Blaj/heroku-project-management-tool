{"version":3,"sources":["actions/types.js","components/Project/ProjectItem.js","actions/projectActions.js","components/Project/CreateProjectButton.js","components/Dashboard.js","securityUtils/setJWTToken.js","actions/securityActions.js","components/Layout/Header.js","components/Project/AddProject.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/backlogReducer.js","reducers/securityReducer.js","reducers/index.js","store.js","components/Project/UpdateProject.js","components/ProjectTasks/ProjectTask.js","actions/backlogActions.js","components/ProjectBoard/Backlog.js","components/ProjectBoard/ProjectBoard.js","components/ProjectTasks/AddProjectTask.js","components/ProjectTasks/UpdateProjectTask.js","components/Layout/Landing.js","components/UserManagement/Register.js","components/UserManagement/Login.js","securityUtils/SecureRoute.js","App.js","serviceWorker.js","index.js"],"names":["GET_ERRORS","ProjectItem","onDeleteClick","id","props","deleteProject","project","this","className","projectIdentifier","projectName","description","to","onClick","bind","Component","connect","dispatch","a","window","confirm","axios","delete","type","payload","CreateProjectButton","Fragment","Dashboard","getProjects","projects","map","key","state","get","res","data","setJWTToken","token","defaults","headers","common","logout","localStorage","removeItem","Header","location","href","headerLinks","security","validToken","user","userIsAuthenticated","fullName","userIsNotAuthenticated","data-toggle","data-target","AddProject","start_date","end_date","errors","onChange","onSubmit","nextProps","setState","e","target","name","value","preventDefault","newProject","createProject","history","classnames","placeholder","post","push","response","initialState","project_tasks","project_task","booleanActionPayload","combineReducers","action","filter","backlog","projectSequence","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","UpdateProject","match","params","getProject","updateProject","disabled","put","ProjectTask","backlog_id","pt_id","deleteProjectTask","priorityString","priorityClass","priority","summary","acceptanceCriteria","Backlog","tasks","project_tasks_prop","todoItems","inProgressItems","doneItems","i","length","status","ProjectBoard","getBacklog","BoardContent","projectNotFound","role","boardAlgo","AddProjectTask","dueDate","newTask","addProjectTask","UpdateProjectTask","create_At","updatedProjectTask","updateProjectTask","getProjectTask","propTypes","PropTypes","func","isRequired","object","projectTask","patch","Landing","Register","username","password","confirmPassword","newUser","createNewUser","required","Login","LoginRequest","login","setItem","decoded","jwt_decode","component","otherProps","render","jwtToken","decoded_jwtToken","currentTime","Date","now","exp","App","exact","path","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3af380d6.chunk.js","sourcesContent":["// define type of actions we want to perform\nexport const GET_ERRORS = \"GET_ERRORS\"; // error reducers\nexport const GET_PROJECTS = \"GET_PROJECTS\";\nexport const GET_PROJECT = \"GET_PROJECT\";\nexport const DELETE_PROJECT = \"DELETE_PROJECT\";\n\n//Types for Backlog actions\nexport const GET_BACKLOG = \"GET_BACKLOG\";\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\nexport const DELETE_PROJECT_TASK = \"DELETE_PROJECT_TASK\";\n\n//Type to get user\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {deleteProject} from \"../../actions/projectActions\"\n\nclass ProjectItem extends Component {\n\n    onDeleteClick = id => {\n        this.props.deleteProject(id);\n    }\n\n    render() {\n\n        const {project} = this.props;\n\n        return (\n\n              <div className=\"container\">\n                  <div className=\"card card-body bg-light mb-3\">\n                      <div className=\"row\">\n                          <div className=\"col-2\">\n                              <span className=\"mx-auto\">{project.projectIdentifier}</span>\n                          </div>\n                          <div className=\"col-lg-6 col-md-4 col-8\">\n                              <h3>{project.projectName}</h3>\n                              <p>{project.description}</p>\n                          </div>\n                          <div className=\"col-md-4 d-none d-lg-block\">\n                              <ul className=\"list-group\">\n                                  <Link to={`/projectBoard/${project.projectIdentifier}`}>\n                                      <li className=\"list-group-item board\">\n                                          <i className=\"fa fa-flag-checkered pr-1\"> Project Board </i>\n                                      </li>\n                                  </Link>\n                                  <Link to = {`/updateProject/${project.projectIdentifier}`}>\n                                      <li className=\"list-group-item update\">\n                                          <i className=\"fa fa-edit pr-1\"> Update Project Info</i>\n                                      </li>\n                                  </Link>\n                                      <li className=\"list-group-item delete\"\n                                      onClick = {this.onDeleteClick.bind(\n                                          this, project.projectIdentifier\n                                      ) }>\n                                          <i className=\"fa fa-minus-circle pr-1\"> Delete Project</i>\n                                      </li>\n                              </ul>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n\n\n        )\n    }\n}\n\nProjectItem.propTypes = {\n    deleteProject : PropTypes.func.isRequired\n};\n\nexport default connect(null, {deleteProject})(ProjectItem);\n","import axios from \"axios\";\n import { GET_ERRORS, GET_PROJECTS, GET_PROJECT, DELETE_PROJECT } from \"./types\";\n\n export const updateProject = (project, history) => async dispatch => {\n  try {\n\n    await axios.put(\"/api/project\", project);\n    history.push(\"/dashboard\");\n    dispatch({\n\n      type: GET_ERRORS,\n      payload: {}\n    })\n  } catch (err) {\n\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\n\n export const createProject = (project, history) => async dispatch => {\n   try {\n     await axios.post(\"/api/project\", project);\n     history.push(\"/dashboard\");\n   } catch (err) {\n     dispatch({\n       type: GET_ERRORS,\n       payload: err.response.data\n     });\n   }\n };\n\n export const getProjects = () => async dispatch => {\n    const res = await axios.get(\"/api/project/all\");\n    dispatch({\n      type : GET_PROJECTS,\n      payload : res.data\n    })\n };\n\n//id is from the link\n export const getProject = (id, history) => async dispatch => {\n    try {\n\n      const res = await axios.get(`/api/project/${id}`);\n    dispatch({\n      type : GET_PROJECT,\n      payload : res.data \n    })\n    } catch (error) {\n      history.push(\"/dashboard\"); //when we request for an invalid project we redirect to the dashboard \n    }\n };\n\n export const deleteProject = id => async dispatch => {\n   if( window.confirm(\"Are you sure you want to delete the project?\"))\n   {\n      await axios.delete(`/api/project/${id}`);\n      dispatch ({\n        type: DELETE_PROJECT,\n        payload: id\n      });\n   }\n\n }","import React from 'react';\nimport  {Link}  from 'react-router-dom';\n\n\n\nconst CreateProjectButton = () => {\n    return (\n       <React.Fragment> \n            <Link to=\"/addProject\" className=\"btn btn-lg btn-info\">\n                Create a Project\n            </Link>\n        </React.Fragment>\n    );\n};\n\nexport default CreateProjectButton;\n","import React, { Component } from 'react'\nimport ProjectItem from './Project/ProjectItem';\nimport CreateProjectButton from './Project/CreateProjectButton';\nimport {connect} from \"react-redux\";\nimport {getProjects} from \"../actions/projectActions\";\nimport PropTypes from \"prop-types\";\n\n\nclass Dashboard extends Component {\n\n  //lifecycle hooks - says what will happen to the component\n \n  componentDidMount(){\n    this.props.getProjects();  //calls getProjects from projectActions.js\n  }\n\n    render() {\n      // extract the projects \n      const {projects} = this.props.project;\n      \n\n      return (\n        <div className=\"projects\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1 className=\"display-4 text-center\">Projects</h1>\n                <br />\n                <CreateProjectButton />\n  \n                <br />\n                <hr />\n                {\n                  projects.map(project => (\n                    <ProjectItem key = {project.id} project = {project}/>\n                  ))\n                }\n              \n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n  \nDashboard.propTypes = {\n  project : PropTypes.object.isRequired,\n  getProjects : PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  project : state.project //this is from index.js\n});\n\n//connect component to store\nexport default connect(mapStateToProps, {getProjects})(Dashboard);","import axios from \"axios\";\n\nconst setJWTToken = token => {\n    if(token){\n        //set the header \n        axios.defaults.headers.common[\"Authorization\"] = token;\n    } else{\n        delete  axios.defaults.headers.common[\"Authorization\"];\n    }\n};\n\nexport default setJWTToken;","import axios from \"axios\";\nimport {GET_ERRORS, SET_CURRENT_USER} from \"./types\";\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const createNewUser = (newUser, history) => async dispatch =>{\ntry {\n    await axios.post(\"/api/users/register\", newUser);\n    history.push(\"/login\");\n    dispatch({\n        type: GET_ERRORS,\n        payload: {}\n    });\n} catch (err) {\n    dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n    });\n}\n};\n\nexport const login = LoginRequest => async dispatch =>{\n    try {\n        //post login request\n        const res = await axios.post(\"/api/users/login\", LoginRequest);\n        // extract token from res.data\n        const { token } = res.data;\n        // store the token in the localStorage\n        localStorage.setItem(\"jwtToken\", token);\n        // set our token in header ***\n        setJWTToken(token);\n        // decode token on React\n        const decoded = jwt_decode(token);\n        // dispatch to our securityReducer\n        dispatch({\n            type: SET_CURRENT_USER,\n            payload: decoded\n          });\n\n\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        });\n    }\n};\n\nexport const logout = () => dispatch => {\n    localStorage.removeItem(\"jwtToken\");\n    //delete token from header\n    setJWTToken(false);\n\n    dispatch({\n        type: SET_CURRENT_USER,\n        payload: {}\n      });\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {logout} from \"../../actions/securityActions\";\n\n\nclass Header extends Component {\n    logout() {\n      this.props.logout();\n      window.location.href = \"/\";\n    }\n    render() {\n      const { validToken, user } = this.props.security;\n  \n      const userIsAuthenticated = (\n        <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/dashboard\">\n                Dashboard\n              </Link>\n            </li>\n          </ul>\n  \n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/dashboard\">\n                <i className=\"fas fa-user-circle mr-1\" />\n                {user.fullName}\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link\n                className=\"nav-link\"\n                to=\"/logout\"\n                onClick={this.logout.bind(this)}\n              >\n                Logout\n              </Link>\n            </li>\n          </ul>\n        </div>\n      );\n  \n      const userIsNotAuthenticated = (\n        <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/register\">\n                Sign Up\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/login\">\n                Login\n              </Link>\n            </li>\n          </ul>\n        </div>\n      );\n  \n      //toggle the display\n      let headerLinks;\n  \n      if (validToken && user) {\n        headerLinks = userIsAuthenticated;\n      } else {\n        headerLinks = userIsNotAuthenticated;\n      }\n  \n      return (\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n          <div className=\"container\">\n            <Link className=\"navbar-brand\" to=\"/\">\n              Personal Project Management Tool\n            </Link>\n            <button\n              className=\"navbar-toggler\"\n              type=\"button\"\n              data-toggle=\"collapse\"\n              data-target=\"#mobile-nav\"\n            >\n              <span className=\"navbar-toggler-icon\" />\n            </button>\n            {headerLinks}\n          </div>\n        </nav>\n      );\n    }\n  }\n  \nHeader.propTypes = {\n    logout: PropTypes.func.isRequired,\n    security: PropTypes.object.isRequired\n  };\n \n  const mapStateToProps = state => ({\n    security: state.security\n  });\n \n  export default connect(mapStateToProps,{ logout } )(Header);\n","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { createProject } from \"../../actions/projectActions\";\nimport classnames from \"classnames\";\n\nclass AddProject extends Component {\n    constructor(){\n        super();\n\n        this.state = {\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors: {}\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    //life cycle hooks\n    componentWillReceiveProps(nextProps){\n        if(nextProps.errors){\n            this.setState( { errors: nextProps.errors });\n        }\n    };\n\n    //update state\n    onChange(e) {\n        this.setState( { [e.target.name] : e.target.value}); //bind state field to form name\n    }\n\n    //called from the form\n    onSubmit(e){\n        e.preventDefault();\n\n        const newProject = {\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date: this.state.start_date,\n            end_date: this.state.end_date\n        };\n\n        this.props.createProject(newProject, this.props.history)\n    }\n    render() {\n        const {errors} = this.state\n        return (\n            <div>\n            <div className=\"project\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-8 m-auto\">\n                        <h5 className=\"display-4 text-center\">Create Project form</h5>\n                        <hr />\n                        <form onSubmit = {this.onSubmit}>\n                            <div className=\"form-group\">\n                                <input type=\"text\" \n                                className={classnames(\"form-control form-control-lg\" , {\n                                    \"is-invalid\" : errors.projectName\n                                })} \n                                placeholder=\"Project Name\" name=\"projectName\" value={this.state.projectName} onChange = {this.onChange} />\n                                {\n                                    errors.projectName && (\n                                        <div className = \"invalid-feedback\">{errors.projectName} </div>\n                                    )\n                                }\n                            </div>\n                            <div className=\"form-group\">\n                                <input type=\"text\" className={ classnames(\"form-control form-control-lg\", {\n                                    \"is-invalid\" : errors.projectIdentifier\n                                })} \n                                placeholder=\"Unique Project ID\" name=\"projectIdentifier\" value={this.state.projectIdentifier} onChange = {this.onChange} />\n                                {\n                                    errors.projectIdentifier && (\n                                        <div className = \"invalid-feedback\">{ errors.projectIdentifier }</div>\n                                    )\n                                }\n\n                            </div>\n              \n                            \n                            <div className=\"form-group\">\n                                <textarea className={ classnames(\"form-control form-control-lg\",{\n                                    \"is-invalid\" : errors.description\n                                })} \n                                placeholder=\"Project Description\" name=\"description\" value={this.state.description} onChange = {this.onChange} ></textarea>\n                                {\n                                    errors.description && (\n                                        <div className = \"invalid-feedback\"> { errors.description } </div>\n                                    )\n                                }\n                            </div>\n                            <h6>Start Date</h6>\n                            <div className=\"form-group\">\n                                <input type=\"date\" className=\"form-control form-control-lg\" name=\"start_date\" value={this.state.start_date} onChange = {this.onChange} />\n                            </div>\n                            <h6>Estimated End Date</h6>\n                            <div className=\"form-group\">\n                                <input type=\"date\" className=\"form-control form-control-lg\" name=\"end_date\" value={this.state.end_date} onChange = {this.onChange} />\n                            </div>\n    \n                            <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n        );\n    }\n}\n\nAddProject.propTypes = {\n    createProject : PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired \n};\n\n//map state to props\nconst mapStateToProps = state => ({\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps, \n    { createProject }\n    ) (AddProject);\n","import {GET_ERRORS} from \"../actions/types\";\n\nconst initialState = {}; // initial state is an empty object\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case GET_ERRORS:\n            return action.payload;\n        \n        default:\n            return state;\n    }\n}","import {GET_PROJECTS, GET_PROJECT, DELETE_PROJECT} from \"../actions/types\";\n\nconst initialState = {\n    projects: [],\n    project: {}\n};\n\nexport default function(state = initialState, action){\n    switch(action.type){\n       case GET_PROJECTS:\n\n        return {\n            /*\n            <Component x={} y={} z={} />\n            Thus instead you do this, wrap them up in an object and use the spread notation\n\n            var props = { x: 1, y: 1, z:1 };\n            <Component {...props} />\n            */\n           ...state,\n           projects : action.payload// what we are sending to the store/returning to the server\n        };\n\n        case GET_PROJECT:\n            return {\n                ...state,\n                project : action.payload\n            };\n\n            case DELETE_PROJECT:\n                return{\n                    ...state,\n                    projects: state.projects.filter(project=>project.projectIdentifier !== action.payload)\n                };\n\n        default:\n            return state;\n    }\n}","import {GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK} from \"../actions/types\";\n\nconst initialState = {\n    project_tasks: [],\n    project_task: {}\n};\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        \n        case GET_BACKLOG:\n        return {\n            ...state,\n            project_tasks: action.payload\n        };\n\n        case GET_PROJECT_TASK:\n            return {\n                ...state,\n                project_task: action.payload\n            };\n        \n        case DELETE_PROJECT_TASK:\n            return {\n                ...state,\n\n                //if the API call is succesfull\n                project_tasks: state.project_tasks.filter(project_task => project_task.projectSequence !== action.payload)\n            }\n        \n        \n        default:\n            return state;\n    }\n}","import {SET_CURRENT_USER} from \"../actions/types\";\n\nconst initialState = {\n    validToken : false,\n    user : {}\n};\n\nconst booleanActionPayload = payload => {\n    if (payload) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n \n  export default function(state = initialState, action) {\n    switch (action.type) {\n      case SET_CURRENT_USER:\n        return {\n          ...state,\n          validToken: booleanActionPayload(action.payload),\n          user: action.payload\n        };\n \n      default:\n        return state;\n    }\n  }","import {combineReducers} from \"redux\";\nimport errorReducer from \"./errorReducer\";\nimport projectReducer from \"./projectReducer\";\nimport backlogReducer from \"./backlogReducer\";\nimport securityReducer from \"./securityReducer\";\n\nexport default combineReducers({\n    errors : errorReducer,\n    project : projectReducer,\n    backlog : backlogReducer,\n    security : securityReducer\n});","import {createStore, applyMiddleware, compose} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\nconst middleware = [thunk];\n\nlet store;\n\nconst ReactReduxDevTools =  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\n    store = createStore(rootReducer, initialState, compose\n        (applyMiddleware(...middleware), \n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n        )\n        );\n\n} else {\n    store = createStore(\n        rootReducer, \n        initialState, \n        compose(applyMiddleware(...middleware))\n        );\n}\n\nexport default store;","import React, { Component } from 'react';\nimport { getProject,  updateProject } from \"../../actions/projectActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\n\nclass UpdateProject extends Component {\n\n    //set initial state\n    constructor(){\n        super()\n\n        this.state = {\n            id: \"\",\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors : {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\ncomponentWillReceiveProps(nextProps){\n    if (nextProps.errors){\n        this.setState({ errors: nextProps.errors});\n    }\n\n    const {            \n    id,\n    projectName,\n    projectIdentifier,\n    description,\n    start_date,\n    end_date\n    } = nextProps.project;\n\n    this.setState({\n        id,\n        projectName,\n        projectIdentifier,\n        description,\n        start_date,\n        end_date\n    });\n}\n\n    componentDidMount(){\n        const { id } = this.props.match.params;\n        this.props.getProject(id, this.props.history);\n\n    }\n/*\n    How we get the ID?\n    When we render the component we render a set of props, thats where we get the history but also the params\n    from there we get the id\n\n*/\n\n\n    onChange(e){\n        this.setState({[e.target.name] : e.target.value})\n\n    }\n\n    onSubmit(e){\n    e.preventDefault()\n\n    const updateProject = {\n        id: this.state.id,\n        projectName: this.state.projectName,\n        projectIdentifier: this.state.projectIdentifier,\n        description: this.state.description,\n        start_date: this.state.start_date,\n        end_date: this.state.end_date\n    };\n\n    this.props.updateProject(updateProject, this.props.history);\n    }\n\n    render() {\n        const {errors} = this.state; //get errors to access them\n        return (\n            <div className=\"register\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-8 m-auto\">\n                        <h5 className=\"display-4 text-center\">Update Project form</h5>\n                        <hr />\n                        <form onSubmit={this.onSubmit}>\n                            <div className=\"form-group\">\n                                <input type=\"text\" className={classnames(\"form-control form-control-lg \", {\n                                    \"is-invalid\" : errors.projectName\n                                })} placeholder=\"Project Name\" \n                                name = \"projectName\" value = {this.state.projectName} onChange ={this.onChange}/>\n                                {\n                                    errors.projectName && ( //classnames syntax,\n                                        <div className=\"invalid-feedback\">{ errors.projectName } </div>\n                                    )\n                                }\n                            </div>\n                            <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Unique Project ID\"\n                                name = \"projectIdentifier\" value = {this.state.projectIdentifier} \n                                    disabled />\n                            </div>\n                            <div className=\"form-group\">\n                                <textarea className={classnames(\"form-control form-control-lg\", {\n                                    \"is-invalid\" : errors.description\n                                })} placeholder=\"Project Description\"\n                                name = \"description\" value = {this.state.description} onChange ={this.onChange}>\n                                </textarea>\n                                {\n                                    errors.description && (\n                                        <div className=\"invalid-feedback\">{ errors.description }</div>\n                                    )\n                                }\n                            </div>\n                            <h6>Start Date</h6>\n                            <div className=\"form-group\">\n                                <input type=\"date\" className=\"form-control form-control-lg\" name=\"start_date\" value = {this.state.start_date} onChange ={this.onChange}/>\n                            </div>\n                            <h6>Estimated End Date</h6>\n                            <div className=\"form-group\">\n                                <input type=\"date\" className=\"form-control form-control-lg\" name=\"end_date\" value = {this.state.end_date}\n                                onChange ={this.onChange} />\n                            </div>\n    \n                            <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nUpdateProject.propTypes = {\n    getProject : PropTypes.func.isRequired,\n    updateProject : PropTypes.func.isRequired,\n    project: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project : state.project.project,\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, {getProject, updateProject})(UpdateProject);","import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport {deleteProjectTask} from \"../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\n\nclass ProjectTask extends Component {\n\n    onDeleteClick(backlog_id, pt_id){\n        this.props.deleteProjectTask(backlog_id, pt_id);\n    }\n    render() {\n        const {project_task} = this.props;\n        let priorityString;\n        let priorityClass;\n\n        switch(project_task.priority){\n            case 1:\n                priorityClass = \"bg-danger text-light\";\n                priorityString = \"HIGH\";\n            break;\n\n            case 2:\n                priorityClass = \"bg-warning text-light\";\n                priorityString = \"MEDIUM\";\n            break;\n\n            case 3:\n                priorityClass = \"bg-info text-light\";\n                priorityString = \"LOW\";\n            break;\n        }\n        \n        return (\n            <div className=\"card mb-1 bg-light\">\n        \n            <div className={`card-header text-primary ${priorityClass}`}>\n                {project_task.projectSequence} {\" \"} {project_task.name } -- Priority: {priorityString}\n            </div>\n            <div className=\"card-body bg-light\">\n                <h5 className=\"card-title\">{project_task.summary}</h5>\n                <p className=\"card-text text-truncate \">\n                    {project_task.acceptanceCriteria}\n                </p>\n                <Link to={`/updateProjectTask/${project_task.projectIdentifier}/${project_task.projectSequence}`}  className=\"btn btn-primary\">\n                    View / Update\n                </Link>\n\n                <button className=\"btn btn-danger ml-4\" onClick={this.onDeleteClick.bind(this,project_task.projectIdentifier, project_task.projectSequence)}>\n                    Delete\n                </button>\n            </div>\n        </div>\n        )\n    }\n}\n\nProjectTask.propTypes = {\n    deleteProjectTask : PropTypes.func.isRequired\n};\n\nexport default connect(null , {deleteProjectTask}) (ProjectTask);","import axios from \"axios\";\nimport { GET_ERRORS, GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK } from \"./types\";\n\nexport const addProjectTask = (backlog_id, project_task, history) => async dispatch => {\ntry {\n   await axios.post(`/api/backlog/${backlog_id}`, project_task);\n   history.push(`/projectBoard/${backlog_id}`);\n   dispatch({\n       type: GET_ERRORS,\n       payload: {}\n   });\n} catch (err) {\n    dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n    });\n}\n}\n\nexport const getProjectTask = (backlog_id, pt_id, history) => async dispatch => {\n    try {\n        const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: GET_PROJECT_TASK,\n            payload: res.data\n        });\n    } catch (error) {\n        history.push(\"/dashboard\"); //when we request for an invalid project we redirect to the dashboard \n    }\n   };\n\n   export const updateProjectTask = (backlog_id,pt_id, projectTask, history) => async dispatch => {\n       try {\n           await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, projectTask);\n           history.push(`/projectBoard/${backlog_id}`);\n           dispatch({\n               type: GET_ERRORS,\n               payload : {}\n           });\n\n       } catch (error) {\n           dispatch({\n               type: GET_ERRORS,\n               payload: error.response.data\n           });\n       }\n   };\n\n\nexport const getBacklog = backlog_id => async dispatch => {\n    try {\n        const res = await axios.get(`/api/backlog/${backlog_id}`);\n        dispatch({\n            type: GET_BACKLOG,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload : err.response.data\n        });\n    }\n};\n\nexport const deleteProjectTask = (backlog_id, pt_id) => async dispatch => {\n    if ( window.confirm(\"Are you sure you want to delete this Project Task\"))\n    {\n        await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch ({\n            type: DELETE_PROJECT_TASK,\n            payload: pt_id\n        });\n    }\n}","import React, { Component } from 'react'\nimport ProjectTask from '../ProjectTasks/ProjectTask'\n\nclass Backlog extends Component {\n    render() {\n        const {project_tasks_prop} = this.props;\n        //extract the project tasks\n        const tasks = project_tasks_prop.map(project_task => (\n           <ProjectTask key = {project_task.id} project_task = {project_task} /> \n        ));\n\n        let todoItems = [];\n        let inProgressItems = [];\n        let doneItems = [];\n\n        for(let i = 0; i < tasks.length; i++){\n            switch(tasks[i].props.project_task.status){\n                case \"TO_DO\":\n                    todoItems.push(tasks[i]);\n                break;\n                \n                case \"IN_PROGRESS\":\n                    inProgressItems.push(tasks[i]);\n                break;\n\n                case \"DONE\":\n                    doneItems.push(tasks[i]);\n                break;\n            }\n        }\n        return (\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header bg-secondary text-white\">\n                                    <h3>TO DO</h3>\n                                </div>\n                            </div>\n                            {todoItems}\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header bg-primary text-white\">\n                                    <h3>In Progress</h3>\n                                </div>\n                            </div>\n                            {inProgressItems}\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header bg-success text-white\">\n                                    <h3>Done</h3>\n                                </div>\n                            </div>\n                       \n                            {doneItems}\n    \n                        </div>\n                    </div>\n                </div>\n        \n        )\n    }\n}\n\nexport default  Backlog;","import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport Backlog from './Backlog';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {getBacklog} from \"../../actions/backlogActions\";\n\nclass ProjectBoard extends Component {\n\n    //constructor to handle errors\n    constructor(){\n        super();\n        this.state = {\n            errors : {}\n        };\n    }\n\n    componentDidMount(){\n        const {id} = this.props.match.params;\n        this.props.getBacklog(id);\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(nextProps.errors){\n            this.setState({errors : nextProps.errors});\n        }\n    }\n\n    \n    render(){\n        const {id} = this.props.match.params;\n        const {project_tasks} = this.props.backlog;\n        const {errors} = this.state;\n        let BoardContent;\n\n    const boardAlgo = (errors, project_tasks) => {\n        if(project_tasks.length < 1){\n            if(errors.projectNotFound){\n                return (\n                    <div className=\"alert alert-danger text-center\" role = \"alert\">\n                    {errors.projectNotFound}\n                    </div>\n                );\n            }\n            else\n            if(errors.projectIdentifier){\n                return (\n                    <div className=\"alert alert-danger text-center\" role = \"alert\">\n                    {errors.projectIdentifier}\n                    </div>\n                );\n            }\n\n            else {\n                return (\n                    <div className=\"alert alert-info text-center\">\n                    No Project Task on this Board\n                    </div>\n                );\n            }\n        }\n        else {\n            return   <Backlog project_tasks_prop={project_tasks}/>;\n        }\n    };\n    BoardContent = boardAlgo(errors, project_tasks);\n\n        return (\n            <div className=\"container\">\n            <Link to={`/addProjectTask/${id}`} className=\"btn btn-primary mb-3\">\n                <i className=\"fas fa-plus-circle\"> Create Project Task</i>\n            </Link>\n            <br />\n            <hr />\n            {BoardContent}\n          \n        </div>\n    \n            \n\n        )\n    }\n}\n\nProjectBoard.propTypes = {\n    getBacklog : PropTypes.func.isRequired,\n    backlog : PropTypes.object.isRequired,\n    errors : PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state =>({\n    backlog : state.backlog,\n    errors : state.errors\n});\n\nexport default connect(mapStateToProps, {getBacklog})(ProjectBoard);","import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport classnames from \"classnames\";\nimport {addProjectTask} from \"../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\n\nclass AddProjectTask extends Component {\n\n    constructor(props){\n        super(props)\n        const {id} = this.props.match.params;\n\n        this.state = {\n            name: \"\",\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            status: \"\",\n            priority: \"0\",\n            dueDate: \"\",\n            projectIdentifier : id,\n            errors: {}\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    };\n\n    componentWillReceiveProps(nextProps){\n        if (nextProps.errors){\n            this.setState({errors : nextProps.errors});\n        }\n    }\n\n    //on change\n    onChange(e){\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    }\n    //on submit\n    onSubmit(e){\n        e.preventDefault();\n\n        const newTask = {\n            name: this.state.name,\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate\n        };\n\n        this.props.addProjectTask(this.state.projectIdentifier , newTask, this.props.history);\n    }\n\n\n    render() {\n        const {id} = this.props.match.params;\n        const {errors } = this.state;\n        return (\n            <div className=\"add-PBI\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-8 m-auto\">\n                        <Link to={`/projectBoard/${id}`} className=\"btn btn-light\">\n                            Back to Project Board\n                        </Link>\n                        <h4 className=\"display-4 text-center\">Add Project Task</h4>\n                        <p className=\"lead text-center\">Project Name + Project Code</p>\n                        <form onSubmit={this.onSubmit}>\n                            <div className=\"form-group\">\n                                <input type=\"text\" className= {classnames(\"form-control form-control-lg\", {\n                                    \"is-invalid\": errors.name\n                                })} \n                                name=\"name\" placeholder=\"Project Task name\" value = {this.state.name} onChange = {this.onChange}/>\n                                {\n                                    errors.name && (\n                                        <div className=\"invalid-feedback\">{errors.name}</div>\n                                    )\n                                }\n                        </div>\n                            <div className=\"form-group\">\n                                <input type=\"text\" className= {classnames(\"form-control form-control-lg\", {\n                                    \"is-invalid\": errors.summary\n                                })} \n                                name=\"summary\" placeholder=\"Project Task summary\" value = {this.state.summary} onChange = {this.onChange}/>\n                                {\n                                    errors.summary && (\n                                        <div className=\"invalid-feedback\">{errors.summary}</div>\n                                    )\n                                }\n                            </div>\n                           \n                            <div className=\"form-group\">\n                                <textarea className=\"form-control form-control-lg\" placeholder=\"Acceptance Criteria\" name=\"acceptanceCriteria\" value = {this.state.acceptanceCriteria} onChange = {this.onChange} ></textarea>\n                            </div>\n                            <h6>Due Date</h6>\n                            <div className=\"form-group\">\n                                <input type=\"date\" className=\"form-control form-control-lg\" name=\"dueDate\" value = {this.state.dueDate} onChange = {this.onChange}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <select className=\"form-control form-control-lg\" name=\"priority\" value = {this.state.priority} onChange = {this.onChange}>\n                                    <option value={0}>Select Priority</option>\n                                    <option value={1}>High</option>\n                                    <option value={2}>Medium</option>\n                                    <option value={3}>Low</option>\n                                </select>\n                            </div>\n    \n                            <div className=\"form-group\">\n                                <select className=\"form-control form-control-lg\" name=\"status\" value = {this.state.status} onChange = {this.onChange}>\n                                    <option value=\"\">Select Status</option>\n                                    <option value=\"TO_DO\">TO DO</option>\n                                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                    <option value=\"DONE\">DONE</option>\n                                </select>\n                            </div>\n    \n                            <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n});\n\nAddProjectTask.propTypes = {\n    addProjectTask : PropTypes.func.isRequired,\n    errors : PropTypes.object.isRequired\n};\n\nexport default connect(mapStateToProps, {addProjectTask}) (AddProjectTask);","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport classnames from \"classnames\";\nimport {getProjectTask, updateProjectTask} from \"../../actions/backlogActions\";\nimport ProjectBoard from '../ProjectBoard/ProjectBoard';\nimport PropTypes from \"prop-types\";\nimport {Link} from \"react-router-dom\";\n\nclass UpdateProjectTask extends Component {\n\n    constructor(){\n        super();\n        this.state = {\n            name: \"\",\n            id: \"\",\n            projectSequence: \"\",\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            status: \"\",\n            priority: \"\",\n            dueDate: \"\",\n            create_At: \"\",\n            projectIdentifier: \"\",\n            errors : {}\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChange(e){\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    }\n\n    onSubmit(e){\n        e.preventDefault();\n\n        const updatedProjectTask = {\n            name: this.state.name,\n            id: this.state.id,\n            projectSequence: this.state.projectSequence,\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate,\n            create_At: this.state.create_At,\n            projectIdentifier: this.state.projectIdentifier\n        };\n        \n\n        this.props.updateProjectTask(this.state.projectIdentifier, this.state.projectSequence, updatedProjectTask, this.props.history);\n    }\n\n    componentDidMount(){\n        // const {pt_id} = this.props.match.params;\n        // const {backlog_id} = this.props.match.params;\n        const {backlog_id, pt_id} = this.props.match.params;\n        this.props.getProjectTask(backlog_id,pt_id, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(nextProps.errors){\n            this.setState({ errors: nextProps.errors});\n        }\n\n        const {\n            name,\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate,\n            create_At,\n            projectIdentifier\n        } = nextProps.project_task;\n\n        this.setState({\n            name,\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate,\n            create_At,\n            projectIdentifier\n        });\n    }\n\n\n    render() {\n        const {errors} = this.state;\n        return (\n            <div className=\"add-PBI\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-8 m-auto\">\n                        <Link to={`/projectBoard/${this.state.projectIdentifier}`}  className=\"btn btn-light\">\n                            Back to Project Board\n                        </Link>\n                        <h4 className=\"display-4 text-center\">Add /Update Project Task</h4>\n                        <p className=\"lead text-center\">Project Name {this.state.projectIdentifier} + Project Task ID:{\" \"} {this.state.projectSequence}</p>\n                        <form onSubmit={this.onSubmit}>\n                            <div className=\"form-group\">\n                                 <input type=\"text\" className= {classnames(\"form-control form-control-lg\", {\n                                    \"is-invalid\": errors.name\n                                })}  name=\"name\" placeholder=\"Project Task name\" value = {this.state.name} onChange = {this.onChange}/>\n                                {\n                                    errors.name && (\n                                        <div className=\"invalid-feedback\">{errors.name}</div>\n                                    )\n                                }\n                            </div>\n                            <div className=\"form-group\">\n                                <input type=\"text\" className= {classnames(\"form-control form-control-lg\", {\n                                    \"is-invalid\": errors.summary\n                                })}  name=\"summary\" placeholder=\"Project Task summary\" value = {this.state.summary} onChange = {this.onChange}/>\n                                {\n                                    errors.summary && (\n                                        <div className=\"invalid-feedback\">{errors.summary}</div>\n                                    )\n                                }\n                            </div>\n                            \n                            <div className=\"form-group\">\n                                <textarea className=\"form-control form-control-lg\" placeholder=\"Acceptance Criteria\" name=\"acceptanceCriteria\" value = {this.state.acceptanceCriteria} onChange = {this.onChange}></textarea>\n                            </div>\n                            <h6>Due Date</h6>\n                            <div className=\"form-group\">\n                                <input type=\"date\" className=\"form-control form-control-lg\" name=\"dueDate\" value = {this.state.dueDate} onChange = {this.onChange}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <select className=\"form-control form-control-lg\" name=\"priority\" value = {this.state.priority} onChange = {this.onChange}>\n                                    <option value={0}>Select Priority</option>\n                                    <option value={1}>High</option>\n                                    <option value={2}>Medium</option>\n                                    <option value={3}>Low</option>\n                                </select>\n                            </div>\n    \n                            <div className=\"form-group\">\n                                <select className=\"form-control form-control-lg\" name=\"status\" value = {this.state.status} onChange = {this.onChange}>\n                                    <option value=\"\">Select Status</option>\n                                    <option value=\"TO_DO\">TO DO</option>\n                                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                    <option value=\"DONE\">DONE</option>\n                                </select>\n                            </div>\n    \n                            <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nProjectBoard.propTypes = {\n    getProjectTask : PropTypes.func.isRequired,\n    project_task : PropTypes.object.isRequired,\n    updateProjectTask : PropTypes.func.isRequired,\n    errors : PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project_task : state.backlog.project_task,\n    errors : state.errors\n});\n\nexport default connect(mapStateToProps, {getProjectTask, updateProjectTask})(UpdateProjectTask);","import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nclass Landing extends Component {\n\n    componentDidMount() {\n        if (this.props.security.validToken) {\n          this.props.history.push(\"/dashboard\");\n        }\n      }\n\n    render() {\n        return (\n            <div className=\"landing\">\n            <div className=\"light-overlay landing-inner text-dark\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12 text-center\">\n                            <h1 className=\"display-3 mb-4\">Personal Project Management Tool</h1>\n                            <p className=\"lead\">\n                                Create your account to join active projects or start you own\n                            </p>\n                            <hr />\n                            <Link to = {\"/register\"} className=\"btn btn-lg btn-primary mr-2\">\n                                Sign Up\n                            </Link>\n                            <Link to = {\"/login\"}  className=\"btn btn-lg btn-secondary mr-2\">\n                                Login\n                            </Link>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nLanding.propTypes = {\n    security: PropTypes.object.isRequired\n  };\n \n   const mapStateToProps = state => ({\n    security: state.security\n  });\n \n   export default connect(mapStateToProps)(Landing);","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport classnames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport {createNewUser} from \"../../actions/securityActions\";\n\nclass Register extends Component {\n\n    constructor(){\n        super();\n\n        this.state = {\n            username : \"\",\n            fullName : \"\",\n            password : \"\",\n            confirmPassword : \"\",\n            errors: {}\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChange(e){\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    }\n\n    componentDidMount() {\n      if (this.props.security.validToken) {\n        this.props.history.push(\"/dashboard\");\n      }\n    }\n    \n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n          this.setState({ errors: nextProps.errors });\n        }\n      }\n\n    onSubmit(e){\n        e.preventDefault();\n\n        const newUser = {\n\n            username : this.state.username,\n            fullName : this.state.fullName,\n            password : this.state.password,\n            confirmPassword : this.state.confirmPassword\n        };\n\n        this.props.createNewUser(newUser, this.props.history);\n\n    }\n\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"register\">\n              <div className=\"container\">\n                <div className=\"row\">\n                  <div className=\"col-md-8 m-auto\">\n                    <h1 className=\"display-4 text-center\">Sign Up</h1>\n                    <p className=\"lead text-center\">Create your Account</p>\n                    <form action=\"create-profile.html\" onSubmit = {this.onSubmit}>\n                      <div className=\"form-group\">\n                        <input\n                          type=\"text\"\n                          className= {classnames(\"form-control form-control-lg\", {\n                                    \"is-invalid\": errors.fullName\n                                })} \n                          placeholder=\"fullName\"\n                          name=\"fullName\"\n                          required value = {this.state.fullName} onChange = {this.onChange}\n                        />\n                        {\n                            errors.fullName && (\n                                <div className=\"invalid-feedback\">{errors.fullName}</div>\n                            )\n                        }\n                      </div>\n                      <div className=\"form-group\">\n                        <input\n                          type=\"email\"\n                          className= {classnames(\"form-control form-control-lg\", {\n                                    \"is-invalid\": errors.username\n                                })} \n                          placeholder=\"Username(Email)\"\n                          name=\"username\" value = {this.state.username} onChange = {this.onChange}\n                        />\n                        {\n                            errors.username && (\n                                <div className=\"invalid-feedback\">{errors.username}</div>\n                            )\n                        }\n                      </div>\n                      <div className=\"form-group\">\n                        <input\n                          type=\"password\"\n                          className= {classnames(\"form-control form-control-lg\", {\n                                    \"is-invalid\": errors.password\n                                })} \n                          placeholder=\"Password\"\n                          name=\"password\" value = {this.state.password} onChange = {this.onChange}\n                        />\n                        {\n                            errors.password && (\n                                <div className=\"invalid-feedback\">{errors.password}</div>\n                            )\n                        }\n                      </div>\n                      <div className=\"form-group\">\n                        <input\n                          type=\"password\"\n                          className= {classnames(\"form-control form-control-lg\", {\n                                    \"is-invalid\": errors.confirmPassword\n                                })} \n                          placeholder=\"Confirm Password\"\n                          name=\"confirmPassword\" value = {this.state.confirmPassword} onChange = {this.onChange}\n                        />\n                        {\n                            errors.confirmPassword && (\n                                <div className=\"invalid-feedback\">{errors.confirmPassword}</div>\n                            )\n                        }\n                      </div>\n                      <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        }\n      }\n\n\nconst mapStateToProps = state => ({\n    errors: state.errors,\n    security: state.security\n})\n\nRegister.propTypes = {\n    createNewUser : PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n};\n\n\n\nexport default connect(mapStateToProps, {createNewUser}) (Register);","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\nimport { login } from \"../../actions/securityActions\";\n\nclass Login extends Component {\n    constructor() {\n      super();\n      this.state = {\n        username: \"\",\n        password: \"\",\n        errors:{}\n      };\n      this.onChange = this.onChange.bind(this);\n      this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentDidMount(){\n      if(this.props.security.validToken){\n        this.props.history.push(\"/dashboard\");\n      }\n    }\n \n    componentWillReceiveProps(nextProps) {\n        if (nextProps.security.validToken) {\n          this.props.history.push(\"/dashboard\");\n        }\n        if (nextProps.errors) {\n          this.setState({ errors: nextProps.errors });\n        }\n      }\n      \n    \n    \n\n     onSubmit(e) {\n      e.preventDefault();\n      const LoginRequest = {\n        username: this.state.username,\n        password: this.state.password\n      };\n \n       this.props.login(LoginRequest);\n    }\n \n     onChange(e) {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n\n    render() {\n      const { errors } = this.state;\n        return (\n            <div className=\"login\">\n              <div className=\"container\">\n                <div className=\"row\">\n                  <div className=\"col-md-8 m-auto\">\n                    <h1 className=\"display-4 text-center\">Log In</h1>\n                    <form onSubmit={this.onSubmit}>\n                      <div className=\"form-group\">\n                        <input\n                          type=\"text\"\n                          className={classnames(\"form-control form-control-lg\", {\n                            \"is-invalid\": errors.username\n                          })}\n                          placeholder=\"Email Address\"\n                          name=\"username\"\n                          value={this.state.username}\n                          onChange={this.onChange}\n                        />\n                        {errors.username && (\n                          <div className=\"invalid-feedback\">{errors.username}</div>\n                        )}\n                      </div>\n                      <div className=\"form-group\">\n                        <input\n                          type=\"password\"\n                          className={classnames(\"form-control form-control-lg\", {\n                            \"is-invalid\": errors.password\n                          })}\n                          placeholder=\"Password\"\n                          name=\"password\"  value={this.state.password}\n                          onChange={this.onChange}\n                        />\n                        {errors.password && (\n                          <div className=\"invalid-feedback\">{errors.password}</div>\n                        )}\n                      </div>\n                      <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        }\n      }\n\n      Login.propTypes = {\n        login: PropTypes.func.isRequired,\n        errors: PropTypes.object.isRequired,\n        security: PropTypes.object.isRequired\n      };\n     \n      const mapStateToProps = state => ({\n        security: state.security,\n        errors: state.errors\n      });\n     \n      export default connect(\n        mapStateToProps,\n        { login }\n      )(Login);","import React, { Component } from 'react';\nimport {Route, Redirect} from \"react-router-dom\";\nimport { connect } from \"react-redux\"; //check if user is logged \nimport PropTypes from \"prop-types\";\n\nconst SecuredRoute = ({ component: Component, security, ...otherProps }) => (\n    <Route\n      {...otherProps} //get all props\n      render={props => //render props and send to components if we are logged in\n        security.validToken === true ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to=\"/login\" /> \n        )\n      }\n    />\n  );\n\n  SecuredRoute.propTypes = {\n    security: PropTypes.object.isRequired\n  };\n \n   const mapStateToProps = state => ({\n    security: state.security\n  });\n \n   export default connect(mapStateToProps)(SecuredRoute);","import React, { Component } from \"react\";\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Layout/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport AddProject from './components/Project/AddProject';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport UpdateProject from \"./components/Project/UpdateProject\";\nimport ProjectBoard from \"./components/ProjectBoard/ProjectBoard\";\nimport AddProjectTask from \"./components/ProjectTasks/AddProjectTask\";\nimport UpdateProjectTask from \"./components/ProjectTasks/UpdateProjectTask\";\nimport Landing from \"./components/Layout/Landing\";\nimport Register from \"./components/UserManagement/Register\";\nimport Login from \"./components/UserManagement/Login\";\nimport jwt_decode from \"jwt-decode\";\nimport setJWTToken from \"./securityUtils/setJWTToken\";\nimport { SET_CURRENT_USER } from \"./actions/types\";\nimport {logout} from \"./actions/securityActions\";\nimport SecuredRoute from \"./securityUtils/SecureRoute\";\n\n//get token from local storage\nconst jwtToken = localStorage.jwtToken;\n\nif (jwtToken){\n  setJWTToken(jwtToken);\n  const decoded_jwtToken = jwt_decode(jwtToken);\n\n  //dispatch again to the state\n  store.dispatch({\n    type: SET_CURRENT_USER,\n    payload: decoded_jwtToken\n  });\n\n  const currentTime = Date.now() / 1000;\n\n  if (decoded_jwtToken.exp < currentTime) {\n    store.dispatch(logout());\n    window.location.href = \"/\";\n  }\n\n}\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store = {store}>  \n        <Router>\n          <div className=\"App\">\n            <Header />\n            {\n              // Public Routes\n            }\n              <Route exact path =\"/\" component = {Landing} />\n              <Route exact path = \"/login\" component = {Login} />\n              <Route exact path =\"/register\" component = {Register} />\n\n\n            {\n              // Private Routes\n               //switch added to handle the secured route which should not be accesable if not logged\n            }\n\n           <Switch>\n              <SecuredRoute exact path=\"/dashboard\" component={Dashboard} />\n              <SecuredRoute exact path=\"/addProject\" component={AddProject} />\n              <SecuredRoute exact path=\"/updateProject/:id\" component={UpdateProject} />\n              <SecuredRoute exact path=\"/projectBoard/:id\" component={ProjectBoard} />\n              <SecuredRoute exact path=\"/addProjectTask/:id\" component={AddProjectTask} />\n              <SecuredRoute exact path =\"/updateProjectTask/:backlog_id/:pt_id\" component = {UpdateProjectTask} />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}